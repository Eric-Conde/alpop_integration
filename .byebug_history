c
n
locatario.id_sacado_sac
n
id
c
sacados_by_id = sacados.group_by { |sacado| sacado["id_sacado_sac"] }
sacados = data
data
data[3]
data[1]
data[0]
data.size
data
sacados
sacado
 sacados_by_id = sacados.group_by { |sacado| sacado["id_sacado_sac"] }
sacados.group_by { |sacado| sacado["id_sacado_sac"] }
c
data.first
c
inadimplente.last
inadimplente.first
inadimplenete.first
c
inadimplentes = sacados_by_id.filter_map { |sacado| [sacado[1].first, sacado[1].size] if sacado[1].size >= 2 }
c
        inadimplentes = sacados_by_id.filter_map { |sacado| sacado[1].first[:cobrancas_atrasadas]; sacado[1].first if sacado[1].size >= 2 }
c
inadimplentes.first[:cobrancas_atrasadas] = 12c
inadimplentes.first
inadimplentes.first[:cobrancas_atrasadas] = 12
inadimplentes.first
inadimplentes = sacados_by_id.filter_map { |sacado| sacado[1].first if sacado[1].size >= 2 }
c
inadimplentes = sacados_by_id.filter_map do |sacado|
        end
          end
            sacado[1].first
            sacado[1][:cobrancas_atrasadas] = sacado[1].size
          if sacado[1].size >= 2
inadimplentes = sacados_by_id.filter_map do |sacado|
c
inadimplentes = sacados_by_id.filter_map { |sacado| sacado[1].first if sacado[1].size >= 2 }
c
inadimplentes.size
inadimplentes = sacados_by_id.filter_map { |sacado| sacado[1].size >= 2 ? sacado[1][0] : nil }
inadimplentes = sacados_by_id.filter_map { |sacado| sacado[1].size >= 2 ? sacado[1] : nil }
inadimplentes.last
inadimplentes.first
inadimplentes.size
inadimplentes = sacados_by_id.map { |sacado| sacado[1].size >= 2 ? sacado[1] : nil }
c
inadimplentes[1]
inadimplentes[0]
inadimplentes.size
inadimplentes = sacados_by_id.find { |sacado| sacado[1] if sacado[1].size >= 2 }
c
inadimplentes[1]
inadimplentes[0]
inadimplentes.size
inadimplentes = sacados_by_id.find { |sacado| sacado if sacado[1].size >= 2 }
sacados_by_id.find { |sacado| sacado if sacado[1].size >= 2 }
sacados_by_id.select { |sacado| sacado if sacado[1].size >= 2 }
sacados_by_id.map { |sacado| sacado[1].size >= 2 ? sacado : sacados_by_id.select { |sacado| sacado if sacado[1].size >= 2 }}}
sacados_by_id
sacados_by_id.first[1].size
sacados_by_id.first[1]
sacados_by_id.first
sacados_by_id.size
sacados_by_id
sacados_by_id.select { |sacado|  puts sacado}
sacados_by_id.select { |sacado|  puts sacado[1]}
sacados_by_id.select { |sacado|  sacado[1].size >= 2 }
c
sacados_by_id.first[1].size
sacados_by_id.first[1]
sacados_by_id.first.size
sacados_by_id.first
sacados_by_id
sacados
sacados.first
sacado['201']
sacados_by_id.select { |sacado|  sacado }
sacados_by_id.select { |sacado|  puts sacado }
c
irb
c
sacados.group_by { |e| e["id_sacado_sac"] }
c
sacados.group_by { |e| e["id_sacado_sac"] }
c
self.to_s.split('::')[1]
self.to_s.split('::')
self.to_s
self.split('::')
self
self.class
c
response['data']
response
data
quit
c
continue
c
continue
c
value
c
value
key
c
table[319][:count]
table[319][1]
table[319][0]
table[319].size
table[319].count
table[319]
table[2]
table[1]
table[0]
table.first
table.size
table
value
key
c
key
table
next
table
c
sacado['id_sacado_sac']
id
id_sacado_sac
sacado['st_nome_sac']
c
locatarios[100]['compo_recebimento'][1]
locatarios[100]['compo_recebimento'][0]
locatarios[100]['compo_recebimento'].size
locatarios[100]['compo_recebimento']
locatarios[100]
locatarios[100]['compo_recebimento']
locatarios[100]['compo_recebimento'].size
locatarios[10]['compo_recebimento'].size
locatarios[0]['compo_recebimento'].size
locatarios[0]['compo_recebimento']
locatarios = json['data'][0]
json['data'][0].size
json['data'].size
json['data'] 
json.data
json.datra
json
json =  JSON.parse(response.body.to_s)
json JSON.parse(response.body.to_s)
JSON.parse(response.body.to_s
response.body.to_s.size
response.body
response.body.size
c
data
c
data.size
c
data.size
c
data.size
c
data.size
c
data.size
c
data.size
data
c
data.size
quit
data.size
c
locataios_inadimplentes.size
c
locatarios_inadimplentes.size
locatarios_inadimplentes
continue
c
sacado['st_nome_sac']
sacado['id_sacado_sac']
c
sacado['id_sacado_sac']
sacado
c
locatarios_inadimplentes
c
data.size
data
data[0].size
data[0]
data
c
sacado['id_sacado_sac']
sacado
c
data
locatario_ativo
c
data[0].size
data[0][0]
data[0]
data.size
data.class
data
c
http.headers(header)
header
headers
c
response.body.to_s
response.body
c
response
c
headers
headers[:app_token] = 'ASdaew65fa6fa7s7676as67'
headers[:app_token]
headers[:accept]
headers['accept']
headers
c
headers
c
headers
c
headers
c
header
headers
c
header
c
response.body.to_s
response = http.get('https://apps.superlogica.net/imobiliaria/api/cobrancas?status=pendentes')
http.headers(:accept => "application/json", :access_token => "b40f8eec-8828-35c0-ab51-7e59ac691469", :app_token => "b9478c57-81ad-3cf1-b34c-bdf04ee75316")
response.body.to_s
response.body
response = http.headers(:accept => "application/json", :access_token => "b40f8eec-8828-35c0-ab51-7e59ac691469", :app_token => "b9478c57-81ad-3cf1-b34c-bdf04ee75316").get('https://apps.superlogica.net/imobiliaria/api/cobrancas?status=pendentes')
http.headers(:accept => "application/json", :access_token => "b40f8eec-8828-35c0-ab51-7e59ac691469", :app_token => "b9478c57-81ad-3cf1-b34c-bdf04ee75316").get('https://apps.superlogica.net/imobiliaria/api/cobrancas?status=pendentes')
http.headers(:accept => "application/json", :access_token => "b40f8eec-8828-35c0-ab51-7e59ac691469", :app_
http
c
http
quit
http.inspect
http.headers
http.headers(:app_token)
